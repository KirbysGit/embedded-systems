#include <msp430fr6989.h>

#define redLED BIT0 // Red at P1.0
#define greenLED BIT7 // Green at P9.7
#define BUT1 BIT1      // Button S1 at P1.1
#define BUT2 BIT2      // Button S2 at P1.2

volatile unsigned int counter = 0; // 16-bit counter

void Initialize_LCD();
void lcd_write_uint16(unsigned int n);
void Initialize_Buttons();
void Initialize_Timer();

const unsigned char LCD_Shapes[10] = {0xFC, 0x60, 0xDB, 0xF3, 0x67, 0xB7, 0xBF, 0xE4, 0xFF, 0xF7};

int main(void) {
    WDTCTL = WDTPW | WDTHOLD; // Stop WDT
    PM5CTL0 &= ~LOCKLPM5; // Enable GPIO pins

    Initialize_LCD();

    P1DIR &= ~(BUT1 | BUT2);
    P1REN |= (BUT1 | BUT2);
    P1OUT |= (BUT1 | BUT2);
    P1IES |= (BUT1 | BUT2);
    P1IFG &= ~(BUT1 | BUT2);
    P1IE |= (BUT1 | BUT2);

    TA0CCTL0 = CCIE;                   // Enable interrupt for CCR0
    TA0CTL = TASSEL__ACLK | MC__UP;    // ACLK as source, Up mode
    TA0CCR0 = 32768 - 1;               // 32768 / 32768 Hz = 1 second interval

    __bis_SR_register(GIE); // Global Interrupt Enable

    while (1){}

}


// Timer A0 interrupt service routine
#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timer_A (void) {
    counter = (counter + 1); // Increment counter and ensure it's 16-bit
    lcd_write_uint16(counter);        // Update display
}

// Port 1 interrupt service routine for BUT1 and BUT2
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void) {
    if (P1IFG & BUT1) { // Check if S1 was pressed
        counter = 0; // Reset counter
        P1IFG &= ~BUT1; // Clear S1 interrupt flag
    }
    if (P1IFG & BUT2) { // Check if S2 was pressed
        counter += 1000; // Increase counter by 1000
        P1IFG &= ~BUT2; // Clear S2 interrupt flag
    }
    lcd_write_uint16(counter); // Update display
}

void Initialize_LCD() {
    PJSEL0 = BIT4 | BIT5;

    // Initialize LCD segments 0 - 21; 26 - 43
    LCDCPCTL0 = 0xFFFF;
    LCDCPCTL1 = 0xFC3F;
    LCDCPCTL2 = 0x0FFF;

    // Configure LFXT 32kHz crystal
    CSCTL0_H = CSKEY >> 8; // Unlock CS registers
    CSCTL4 &= ~LFXTOFF; // Enable LFXT
    do {
        CSCTL5 &= ~LFXTOFFG; // Clear LFXT fault flag
       SFRIFG1 &= ~OFIFG;
    } while (SFRIFG1 & OFIFG); // Test oscillator fault flag

    CSCTL0_H = 0; // Lock CS registers
    // Initialize LCD_C
    // ACLK, Divider = 1, Pre-divider = 16; 4-pin MUX
    LCDCCTL0 = LCDDIV__1 | LCDPRE__16 | LCD4MUX | LCDLP;
    // VLCD generated internally,
    // V2-V4 generated internally, v5 to ground
    // Set VLCD voltage to 2.60v
    // Enable charge pump and select internal reference for it
    LCDCVCTL = VLCD_1 | VLCDREF_0 | LCDCPEN;
    LCDCCPCTL = LCDCPCLKSYNC; // Clock synchronization enabled
    LCDCMEMCTL = LCDCLRM; // Clear LCD memory
    //Turn LCD on
    LCDCCTL0 |= LCDON;
    return;
}

void lcd_write_uint16(unsigned int n) {
    // Clear all LCD segments
    LCDCMEMCTL = LCDCLRM;

    // Display digits from left to right
    if (n > 9999) LCDM6 = LCD_Shapes[n / 10000 % 10]; // 10,000th place
    if (n > 999) LCDM4 = LCD_Shapes[n / 1000 % 10];   // 1,000th place
    if (n > 99) LCDM19 = LCD_Shapes[n / 100 % 10];    // 100th place
    if (n > 9) LCDM15 = LCD_Shapes[n / 10 % 10];      // 10th place
    LCDM8 = LCD_Shapes[n % 10];                      // Units place
}
