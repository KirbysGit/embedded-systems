#include <msp430.h>

void Initialize_I2C(void);
int i2c_read_word(unsigned char, unsigned char, unsigned int*);
int i2c_write_word(unsigned char, unsigned char, unsigned int);
unsigned char uart_read_char(void);
void Initialize_UART(void);
void uart_write_char(unsigned char ch);
void uart_write_string(char* str);
void uart_write_uint16(unsigned int n);

#define FLAGS UCA1IFG
#define RXFLAG UCRXIFG
#define TXFLAG UCTXIFG
#define TXBUFFER UCA1TXBUF
#define RXBUFFER UCA1RXBUF

int main(void) {
    WDTCTL = WDTPW | WDTHOLD;
    PM5CTL0 &= ~LOCKLPM5;

    Initialize_UART();
    Initialize_I2C();

    unsigned int lightMeasurement = 0;
    unsigned int counter = 0;

    unsigned int configValue = 0x7604;

    i2c_write_word(0x44, 0x01, configValue);

    while (1) {
        i2c_read_word(0x44, 0x00, &lightMeasurement);
        uart_write_uint16(counter++);
        uart_write_string(": ");
        uart_write_uint16(lightMeasurement);
        uart_write_string("\r\n");

        __delay_cycles(1000000);
    }
}

void Initialize_I2C(void) {
    P4SEL1 |= (BIT1 | BIT0);
    P4SEL0 &= ~(BIT1 | BIT0);

    UCB1CTLW0 = UCSWRST;

    UCB1CTLW0 |= UCMST | UCMODE_3 | UCSYNC | UCSSEL_3;

    UCB1BRW = 8;

    UCB1CTLW0 &= ~UCSWRST;
}

int i2c_read_word(unsigned char i2c_address, unsigned char i2c_reg, unsigned int * data) {

    unsigned char byte1, byte2;

    UCB1I2CSA = i2c_address;
    UCB1IFG &= ~UCTXIFG0;
    UCB1CTLW0 |= UCTR;
    UCB1CTLW0 |= UCTXSTT;
    while ((UCB1IFG & UCTXIFG0) ==0) {}
    UCB1TXBUF = i2c_reg;
    while((UCB1CTLW0 & UCTXSTT)!=0) {}
    if(( UCB1IFG & UCNACKIFG )!=0) return -1;
    UCB1CTLW0 &= ~UCTR;
    UCB1CTLW0 |= UCTXSTT;

    while ( (UCB1IFG & UCRXIFG0) == 0) {}
    byte1 = UCB1RXBUF;

    while((UCB1CTLW0 & UCTXSTT)!=0) {}
    UCB1CTLW0 |= UCTXSTP;
    while ( (UCB1IFG & UCRXIFG0) == 0) {}
    byte2 = UCB1RXBUF;
    while ( (UCB1CTLW0 & UCTXSTP) != 0) {}

    *data = ( (byte1 << 8) | (byte2 & 0xFF) );
    return 0;
}

int i2c_write_word(unsigned char i2c_address, unsigned char i2c_reg, unsigned int data) {
    unsigned char byte1, byte2;

    byte1 = (data >> 8) & 0xFF;
    byte2 = data & 0xFF;
    UCB1I2CSA = i2c_address;
    UCB1CTLW0 |= UCTR;
    UCB1CTLW0 |= UCTXSTT;
    while ((UCB1IFG & UCTXIFG0) ==0) {}
    UCB1TXBUF = i2c_reg;
    while((UCB1CTLW0 & UCTXSTT)!=0) {}
    while ((UCB1IFG & UCTXIFG0) ==0) {}

    UCB1TXBUF = byte1;
    while ( (UCB1IFG & UCTXIFG0) == 0) {}

    UCB1TXBUF = byte2;
    while ( (UCB1IFG & UCTXIFG0) == 0) {}
    UCB1CTLW0 |= UCTXSTP;
    while ( (UCB1CTLW0 & UCTXSTP) != 0) {}
    return 0;
}

void Initialize_UART(void) {
    P3SEL1 &= ~(BIT4|BIT5);
    P3SEL0 |= (BIT4|BIT5);

    UCA1CTLW0 = UCSWRST;
    UCA1CTLW0 |= UCSSEL_2;
    UCA1BRW = 6;
    UCA1MCTLW = UCBRF3 | UCBRS5 | UCOS16;

    UCA1CTLW0 &= ~UCSWRST;
}

void uart_write_char(unsigned char ch) {
    while ((FLAGS & TXFLAG) == 0) {}

    TXBUFFER = ch;
}

void uart_write_string(char* str) {
    while (*str != '\0') {
        uart_write_char(*str++);
    }
}

unsigned char uart_read_char() {
    if ((FLAGS & RXFLAG) == 0)
        return 0;

    return RXBUFFER;
}

void uart_write_uint16(unsigned int n) {
    char buffer[6];
    unsigned int i = 0, j;

    do {
        buffer[i++] = (n % 10) + '0';
        n /= 10;
    } while (n > 0);

    buffer[i] = '\0';

    for (j = i - 1; j != (unsigned int)-1; j--) {
        uart_write_char(buffer[j]);
    }
}
