#include <msp430fr6989.h>

#define redLED BIT0 // Red at P1.0
#define greenLED BIT7 // Green at P9.7

void Initialize_LCD();
void lcd_write_uint16(unsigned int n);

const unsigned char LCD_Shapes[10] = {0xFC, 0x60, 0xDB, 0xF3, 0x67, 0xB7, 0xBF, 0xE4, 0xFF, 0xF7};

int main(void) {
    volatile unsigned int n;

    WDTCTL = WDTPW | WDTHOLD; // Stop WDT

    PM5CTL0 &= ~LOCKLPM5; // Enable GPIO pins

    P1DIR |= redLED; // Pins as output
    P9DIR |= greenLED;

    P1OUT |= redLED; // Red on
    P9OUT &= ~greenLED; // Green off

    Initialize_LCD();

    lcd_write_uint16(5678);


    for (;;) {
        for (n = 0; n <= 60000; n++) {} // Delay loop

        P1OUT ^= redLED; // Flash the red LED
    }

    return 0;
}

// Initializes the LCD_C module
void Initialize_LCD() {
    PJSEL0 = BIT4 | BIT5;

    // Initialize LCD segments 0 - 21; 26 - 43
    LCDCPCTL0 = 0xFFFF;
    LCDCPCTL1 = 0xFC3F;
    LCDCPCTL2 = 0x0FFF;

    // Configure LFXT 32kHz crystal
    CSCTL0_H = CSKEY >> 8; // Unlock CS registers
    CSCTL4 &= ~LFXTOFF; // Enable LFXT
    do {
        CSCTL5 &= ~LFXTOFFG; // Clear LFXT fault flag
       SFRIFG1 &= ~OFIFG;
    } while (SFRIFG1 & OFIFG); // Test oscillator fault flag

    CSCTL0_H = 0; // Lock CS registers
    // Initialize LCD_C
    // ACLK, Divider = 1, Pre-divider = 16; 4-pin MUX
    LCDCCTL0 = LCDDIV__1 | LCDPRE__16 | LCD4MUX | LCDLP;
    // VLCD generated internally,
    // V2-V4 generated internally, v5 to ground
    // Set VLCD voltage to 2.60v
    // Enable charge pump and select internal reference for it
    LCDCVCTL = VLCD_1 | VLCDREF_0 | LCDCPEN;
    LCDCCPCTL = LCDCPCLKSYNC; // Clock synchronization enabled
    LCDCMEMCTL = LCDCLRM; // Clear LCD memory
    //Turn LCD on
    LCDCCTL0 |= LCDON;
    return;
}

// Prints a 16-bit unsigned integer to the display
void lcd_write_uint16(unsigned int n) {
    // Clear all LCD segments
    LCDCMEMCTL = LCDCLRM;

    // Display digits from left to right
    if (n > 9999) LCDM6 = LCD_Shapes[n / 10000 % 10]; // 10,000th place
    if (n > 999) LCDM4 = LCD_Shapes[n / 1000 % 10];   // 1,000th place
    if (n > 99) LCDM19 = LCD_Shapes[n / 100 % 10];    // 100th place
    if (n > 9) LCDM15 = LCD_Shapes[n / 10 % 10];      // 10th place
    LCDM8 = LCD_Shapes[n % 10];                      // Units place
}

